let post=(e,t)=>{let n=null,i={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)};return{fakeResp(e){return n=e,this},options(e){return i=e,this},async execute(t=!1){if(!t&&ENV.devMode)return n;let s=t?e:`https://${window.GetParentResourceName()}/${e}`;try{let r=await fetch(s,i);if(!r.ok)throw Error(`HTTP Error: ${r.status}`);return await r.json()}catch(a){throw console.error("Request failed:",a),a}}}},EVENT_HANDLERS=new Map,isEventListenerInitialized=!1,handleMessageReceived=({data:e})=>{if(!Array.isArray(e)||e.length<2)return console.warn("Received invalid data:",e);let[t,n,...i]=e,s=EVENT_HANDLERS.get(t)?.[n];"function"==typeof s?s(...i):console.warn(`No handler found for event: ${t}/${n}`)},unListener=e=>{if(e)return EVENT_HANDLERS.delete(e);isEventListenerInitialized&&(window.removeEventListener("message",handleMessageReceived),isEventListenerInitialized=!1)},onListener=(e,t)=>{if("string"!=typeof e||!e)throw Error("eventName must be a non-empty string");if(!t||"object"!=typeof t)throw Error("eventHandlers must be an object");return EVENT_HANDLERS.set(e,t),isEventListenerInitialized||(window.addEventListener("message",handleMessageReceived),isEventListenerInitialized=!0),{remove:()=>EVENT_HANDLERS.delete(e)||0===EVENT_HANDLERS.size&&unListener()}},emit=new Proxy({},{get:(e,t)=>new Proxy({},{get:(e,n)=>(...e)=>window.postMessage([t,n,...e],"*")})}),emitDebug=new Proxy({},{get:(e,t)=>new Proxy({},{get:(e,n)=>(...e)=>ENV.devMode&&window.postMessage([t,n,...e],"*")})});export{post,onListener,unListener,emit,emitDebug};
